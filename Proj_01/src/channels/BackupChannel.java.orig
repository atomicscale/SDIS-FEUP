package channels;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;

import message.Message;
import server.Server;
import subprotocols.Backup;

public class BackupChannel extends Channel {
	private byte[] buffer = new byte[65000];
	public BackupChannel(int port, InetAddress adress, Server server) {
		super(port, adress, server);
		// Auto-generated constructor stub
	}
	@Override
	public void run() {

		while (true) {
			DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
			try {
<<<<<<< HEAD
				socket.receive(packet);

			} catch (IOException e) {
				e.printStackTrace();
			}
			Message mR = new Message(packet);

			if (mR.returnSenderID().equals(server.returnPeerID())) {
=======
				socket.receive(packet);				
			}
			catch (IOException e) {
				e.printStackTrace();
			}
			Message mR= new Message(packet);

			if(mR.returnSenderID().equals(server.returnPeerID())){
>>>>>>> 386eac104f3d236a25d134ad97c74d0fa22c1fd0
				System.out.println("sameID");
			} else {
				new Thread(new Backup(packet, server)).start();

			}
<<<<<<< HEAD

=======
			else{
				new Thread(new Backup(packet,server)).start();
>>>>>>> 386eac104f3d236a25d134ad97c74d0fa22c1fd0
		}


	}

	}
	
}
